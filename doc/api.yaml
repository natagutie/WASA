openapi: 3.0.3
info:
  title: WasaPhoto API
  description: |-
    This OpenAPI photoFile describes the abilities of the website WASAPHOTO. It is a social media platform, which allows users to follow each other, like and comment on photos and even ban them. 
    This API was made in 2023/2024.
    The API allows Cross Origin Resource Sharing (CORS).
    
  version: "20"
  
paths:
  /session:
    post:
      tags: ["user"]
      summary: Log in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user does exist, the user identifier is returned.

      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: username of user
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    description:  user identifier of the photo posted by a user.
                    type: string
                    pattern: '^.*?$'
                    example: "122131313" 
                    minLength: 10
                    maxLength: 80
              
   

  /username/{username}/checkUser:
    get:
      tags: ["user"]
      summary: check for existance of user
      description: |-
        This endpoint verifis if the user has an account
      security:
        - bearerAuth: []     
      operationId: checkUser
      parameters:
        - in: path
          name: username
          required: true
          description: |-
           username of the user, to check if they exist
          schema:
            description: username of the user
            type: string
            example: Maria12
        
      responses:
        '200':
          description: Managed to check if the user is in DB
          content:
            application/json:
              schema:
                description: returns true if the user exists, otherwise false.
                type: object
                properties:
                  checkingUser:
                    description: checkingUser is the variablethat is true if the user exists and false if the user doesnt exist.
                    type: boolean
                    example: true


  /username/{username}:
    put:
      tags: ["user"]
      summary: Sets the username of a user
      description: |-
        This endpoint allows the user to change their username.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          description: |-
            username for login
          schema:
            type: string
      operationId: setMyUserName
      requestBody:
        description: Make a Username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '200':
          description: new username is inserted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/username"
        '400':
          description: failed to change username
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "UserID not found"

  /photouser/{photoUsername}:
    get:
      tags: ["photo"]
      summary: get the photos from a user
      description: |-
        This endpoint retrieves the uploaded photos by a user
      security:
        - bearerAuth: []     
      operationId: getPhotos
      parameters:
        - in: path
          name: photoUsername
          required: true
          description: Username of the person trying to retrieve the profile
          schema:
            description: username
            type: string
            example: maria
            pattern: 'ˆ.*?$'
            minLength: 1
            maxLength: 32
      
      responses:
        '200':
          description: Photo is uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoList"


          
  /photo:
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: |-
        Upload a photo
      security:
        - bearerAuth: []     
      operationId: uploadPhoto
      requestBody:
        description: new photo file
        content:
          multipart/form-data:
              schema: 
                description: the photo file
                type: object
                properties:
                  file:
                    format: binary
                    type: string
          
        required: true

      responses:
        '200':
          description: Photos of a user is retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"


                
                
  /followers:
    get:
      tags: ["follow"]
      summary: followers of user
      description: |-
        This endpoint allows a user to retrieve their followers
      security:
        - bearerAuth: []
      operationId: getUserFollowers
      responses:
        '200':
          description: user follower list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Followers"
        '400':
          description: Error getting followers
          content:
            application/json:
              schema:
                description: couldnt find user
                type: object
                properties:
                  error:
                    type: string
                    example: "user not found"

  /followings:
    get:
      tags: ["follow"]
      summary: get followings of user
      description: |-
        This endpoint allows a user to retrieve users that they follow
      security:
        - bearerAuth: []
      operationId: getUserFollowings
      responses:
        '200':
          description: list of users followings 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Followers"
        '400':
          description: couldnt find the followings
          content:
            application/json:
              schema:
                description: error in getting followings
                type: object
                properties:
                  error:
                    type: string
                    example: "error getting user followings"
                    
                    
                  
          
                  
          
  /follow/{fUsername}:
    get:
      tags: ["follow"]
      summary: check if user is following
      description: |-
        TCheck if a user is following another user
      security:
        - bearerAuth: []
      operationId: isFollowing
      parameters:
        - in: path
          name: fUsername
          required: true
          description: username of the other user
          schema:
              $ref: "#/components/schemas/Followers"
      responses:
        '200':
          description: Successfully checked if a user is following another user 
          content:
            application/json:
              schema:
                description: boolean
                type: object
                properties:
                  checkFollow:
                    type: boolean 
                    description: checkFollow is true if the current user is already following another user. If not, its false.
                    example: true
        '400':
          description: Couldnt check if a user is already following another user
          content:
            application/json:
              schema:
                description: no userID found
                type: object
                properties:
                  error:
                    type: string
                    example: "userID doesnt exist"
                  
          
  
    post:
      tags: ["follow"]
      summary: Follow a user
      description: |-
        This endpoint allows a user to follow  another user 
      security:
        - bearerAuth: []
      operationId: followUser
      parameters:
        - in: path
          name: fUsername
          required: true
          description: the other username the current user has searched
          schema:
            type: string
            description: the other username
        
      
      responses:
        '200':
          description: User followed 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Follow"
        '400':
          description: Failed to follow another user
          content:
            application/json:
              schema:
                type: object
                description: failed following another user
                properties:
                  error:
                    type: string
                    example: "userID not found"
                  
          
          
    delete:
        tags: ["follow"]
        summary: Unfollow a user
        description: |-
          user unfollows another user. 
        security:
          - bearerAuth: []
        operationId: unfollowUser
        parameters:
          - in: path
            name: fUsername
            required: true
            description: username of the person the account owner wants to unfollow
            schema:
              type: string
              description: followUsername
        responses:
          '200':
            description: User unfollowed 
            content:
              application/json:
                schema:
                  description: user unfollowed
                  $ref: "#/components/schemas/Follow"
          '400':
            description: Failed to unfollow another user
            content:
              application/json:
                schema:
                  description: unfollow user failed
                  type: object
                  properties:
                    error:
                      type: string
                      example: "unfollow failed"
            
  /username/{username}/ban/{bUsername}:
    get:
      tags: ["ban"]
      summary: Ban user
      description: |-
        This endpoint checks if the user is already banned
      security:
        - bearerAuth: []
      operationId: ifBan
      parameters:
        - in: path
          name: username
          required: true
          description: current user's username
          schema:
            $ref: "#/components/schemas/username"
        - in: path
          name: bUsername
          required: true
          description: the username of the person the current user wants to ban
          schema:
            $ref: "#/components/schemas/username"
      responses:
        '200':
          description: check if user is banned is successful
          content:
            application/json:
              schema:
                description: check if a user is banned
                type: object
                properties:
                  ifBan:
                    type: boolean
                    description: ifBan is true if the current user has banned the other user. False if the other user isnt banned.
                    example: true
        '400':
          description: Failed checking if user is banned
          content:
            application/json:
              schema:
                description: Check if ban failed
                type: object
                properties:
                  error:
                    type: string
                    example: "error checking if banned"
  /ban/{bUsername}:
    post:
      tags: ["ban"]
      summary: Ban user
      description: |-
        ban a user with their username.
      security:
        - bearerAuth: []
      operationId: banUser
      parameters:
        - in: path
          name: username
          required: true
          description: current user's username
          schema:
            $ref: "#/components/schemas/username"
        - in: path
          name: bUsername
          required: true
          description: the username that the current user wants to ban
          schema:
            $ref: "#/components/schemas/username"
      responses:
        '200':
          description: User is banned
          content:
            application/json:
              schema:
                description: user is banned
                $ref: "#/components/schemas/Ban"
        '400':
          description: failed to ban user
          content:
            application/json:
              schema:
                description: banning failed
                type: object
                properties:
                  error:
                    type: string
                    example: "user cant be banned"
    delete:
        tags: ["ban"]
        summary: Unban a user
        description: |-
          unban a user with their username (bUsername)
        security:
          - bearerAuth: []
        operationId: unbanUser
        parameters:
          - in: path
            name: username
            required: true
            description: current user's username
            schema:
              $ref: "#/components/schemas/username"
          
          - in: path
            name: bUsername
            required: true
            description: unban a user with their username, bUsername
            schema:
              $ref: "#/components/schemas/username"
        responses:
          '200':
            description: User is unbanned successfully
            content:
              application/json:
                schema:
                  description: user is unbanned
                  $ref: "#/components/schemas/Ban"
            
          '400':
            description: failed to unban a user with their username
            content:
              application/json:
                schema:
                  description: unban failed
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Error in unbanning user"
            
  /profile/{pUsername}:
    get:
      tags: ["user"]
      summary: Get a user's profile
      description: |-
        Get users profile data
      security:
        - bearerAuth: []
      operationId: getUserProfile
      parameters:
        - in: path
          name: pUsername
          required: true
          description: Username of the person trying to retrieve the profile
          schema:
            description: username
            type: string
            example: maria
            pattern: 'ˆ.*?$'
            minLength: 1
            maxLength: 32
 
      responses:
        '200':
          description: User profile is found.
          content:
            application/json:
              schema:
                description: found the user profile data
                $ref: "#/components/schemas/Profile"
                  
        
        '404':
          description: failed to get user profile data
          content:
            application/json:
              schema:
                description: get user profile failed
                type: object
                properties:
                  error:
                    type: string
                    example: "Getting user profile failed"

  /stream:
    get:
      tags: ["user"]
      summary: Get User's Stream
      description: |-
        This endpoint allows a user to retrieve their stream. A user's stream is a set of photos from other users that they follow. The stream of photos are arranged in reverse chronological order, which includes information about the date and time of each photo uploaded, the number of likes, and the comments on each post.
      security:
        - bearerAuth: []
      operationId: getMyStream
      responses:
        '200':
          description: Got the User's stream successfully
          content:
            image/png:
                schema:
                  $ref: "#/components/schemas/Stream"
                  
                  
        '400':
          description: Stream failed
          content:
            application/json:
              schema:
                description: Cant find user stream 
                type: object
                properties:
                  error:
                    type: string
                    example: "Stream failed"
          
  /photo/{photoID}/like:
    post:
      tags: ["like"]
      summary: Like a Photo
      description: User can like a photo
      security:
        - bearerAuth: []
      operationId: likePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: adding a like to a photo
          schema:
            description: photoID
            type: integer
            example: 8
      responses:
        '200':
          description: Liked a photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"

    delete:
      tags: ["like"]
      summary: Unlike photo
      description: User can unlike a photo
      security:
        - bearerAuth: []
      operationId: unlikePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: photoID
          schema:
            description: photoID
            type: integer
            example: 5
      responses:
        '200':
          description: removed like on photo 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"

  /photo/{photoID}:
    delete:
      tags: ["photo"]
      summary: Delete a Photo
      description: |-
        This endpoint allows a user to delete a photo.
      security:
        - bearerAuth: []
      operationId: deletePhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: |-
            PhotoID is a unique identifier. This is needed to retrieve the
            specific photo to delete.
          schema:
            type: integer
            description: photoID
            example: "pic1"
      responses:
        '200':
          description: Photo is deleted
          content:
            application/json:
              schema:
                description: photo is deleted
                type: object
                properties:
                  message:
                    type: string
                    example: "photo removed successfully"
                
        '404':
          description: Photo not found
          content:
            application/json:
              schema:
                description: error photo cant be deleted
                type: object
                properties:
                  error:
                    type: string
                    example: "photoID not found"
    get:
      tags: ["comment"]
      summary: get all comments from a photo
      description: User may view the comments of a photo
      security:
        - bearerAuth: []
      operationId: getComments
      parameters:
        - in: path
          name: photoID
          required: true
          description: photoID is the identifier of a photo.
          schema:
            description: photo identifier
            type: integer
            example: 1
                
      responses:
        '200':
          description: comments are found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comments"  
    post:
      tags: ["comment"]
      summary: comment on a photo
      description: |-
        This endpoint allows a user to write a comment on a photo. 
      security:
        - bearerAuth: []
      operationId: commentPhoto
      parameters:
        - in: path
          name: photoID
          required: true
          description: photoID is the identfier for a photo.
          schema:
            type: integer
            description: photoID
            example: 6
      requestBody:
        description: the comment that we want post on a photo. 
        content:
          application/json:
            schema:
              description: The comment
              type: object
              properties:
                comment:
                  type: string
                  example: "i like the photo a lot"                
                  pattern: 'ˆ.*?$'
                  minLength: 1
                  maxLength: 100000
                
      responses:
        '200':
          description: Comment uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        
  /comment/{commentID}:       
    delete:
      tags: ["comment"]
      summary: Uncomment on a photo
      description: User may delete their own comment
      security:
        - bearerAuth: []
      operationId: uncommentPhoto
      parameters:
        - in: path
          name: commentID
          required: true
          description: commentID is the comment identfier.
          schema:
            description: commentID
            type: integer
            example: 4      
      responses:
        '200':
          description: comment is removed
          content:
            application/json:
              schema:
                type: object 
                description: comment is gone
                
          
                
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: This is a token generated in the login page. This token acts as a user authentication
  schemas:
    username:
      type: object
      description: user's username
      properties:
        username:
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
  

    Profile:
      type: object
      description: user profile
      properties:
      
        username:
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          description: the username
          
        followCount:
          type: integer
          description: Number of followers following the user.
          example: 10

        followingCount: 
          type: integer
          description: Number of followers the user is following
          example: 10
          
        photoCount:
          type: integer
          description: Number of photos the user has posted
          example: 10
          
    PhotoList:
      type: object
      description: user profile
      properties:
        uploadedPhotos:
          type: array
          description: photos in reverse chronological order.
          minItems: 0
          maxItems: 10000000
          items: 
            type: object
            description: A photo
            properties:
              photoID: 
                type: integer
                description: the unique identifier of photo
                example: 3
        
              userID:
                type: string
                description: user identifier
                minLength: 10
                maxLength: 80
                example: 122131313
                pattern: '^.*?$'

              photoFile:
                type: string
                format: binary
                minLength: 1
                maxLength: 100000
                
              likeCount:
                type: integer
                description: The number of likes on photo.
                example: 22
              commentCount:
                type: integer
                description: The number of comments on photo.
                example: 22
              date:
                type: string
                format: date-time
                minLength: 20
                maxLength: 21
                description: the date and time when the photo is uploaded.
                pattern: '^.*?$'
                example: 2021-05-10T06:11:09Z
              username:
                type: string
                example: Maria
                pattern: 'ˆ.*?$'
                minLength: 3
                maxLength: 16
                description: the username
              ifLike:
                type: boolean
                example: true
                description: check whether the current user has liked the photo
          
          example: 
            - photoID: 12
              commentCount: 10
              likeCount: 103
              date: 2021-01-01T02:08:13Z
              
    Photo:
      type: object
      description: photo Data
      properties:
        photoID: 
          type: integer
          description: the unique identifier for a photo
          example: 4
        userID:
          type: string
          description: user identifier
          minLength: 10
          maxLength: 100000
          example: jl2j3l41j3132
          pattern: '^.*?$'
        photoFile:
          type: string
          format: binary
          example: 1010100101
          minLength: 1
          maxLength: 100000
        likeCount:
          type: integer
          description: The number of likes on the photo.
          example: 22
        commentCount:
          type: integer
          description: The number of comments on the photo.
          example: 22
        date:
          type: string
          format: date-time
          minLength: 20
          maxLength: 100
          description: the date and time of the photo posted.
          pattern: '^.*?$'
          example: 2018-02-08T06:08:02Z
        username:
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          description: the username
        ifLike:
          type: boolean
          example: true
          description: check whether a photo is liked. True if its liked, false if its not liked.
          


    Stream:
      type : object
      description : stream of photos found
      properties :
        photos: 
          description: array of photos from users that the current user follows
          type: array
          minItems: 0
          maxItems: 100000000000
          items:
            type: object
            properties:
              photoID: 
                description:  the identifier for a photo.
                type: integer
                example: 1
           
              userID:
                description:  user identifier of the photo posted by a user.
                type: string
                pattern: '^.*?$'
                example: kjhkjewhr123213
                minLength: 1
                maxLength: 100000
                
              username:
                description: username.
                type: string
                pattern: '^.*?$'
                example: Nata1
                minLength: 3
                maxLength: 16

                
              likeCount:
                description: Number of likes on photo
                type: integer
                example: 32
                
              commentCount:
                description: Number of comments on photo.
                type: integer
                example: 2

                
  
              ifLike:
                description: check whether the user has like a photo
                type: boolean
                example: false

              date:
                description: date and time of when the photo was posted
                type: string
                format: date-time
                example: "2021-06-06T02:03:08Z"
                minLength: 10
                maxLength: 100
                
              photoFile: 
                description: the photo file
                type: string
                format: binary
                example: 1010101010111010101
                minLength: 3
                maxLength: 1000000
                

              
    Follow:
      type: object
      description: successfully followed a user
      properties:
        followID:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^.*?$'
          description: The identifier of follow.
          example: 2
  
    Followers:
      type: object
      description: the users followers
      properties:
        followers:
          type: array
          minLength: 0
          maxLength: 100000
          description: all the users that are following the current user in an array
          items:
            type: object
            description: the username of the users that follow the current user
            properties:
              username:
                description: username.
                type: string
                pattern: '^.*?$'
                example: nata1
                minLength: 3
                maxLength: 16
                
    
    Ban:
      type: object
      description: A string that uniquely identifies a banned user in the banned users list.
      properties:
        banID:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^.*?$'
          description: The ban identifier
          example: 3

    Like:
      type: object
      description: added a like to a photo
      properties:
        likeID: 
          type: integer
          description: the like identifier.
          example: 3
          
    Comment:
      type: object
      description: A comment
      properties:
        commentID:
          type: string
          description: A unique comment identifier
          pattern: '^.*?$'
          minLength: 2
          maxLength:  100
          example: "122131313"

        commentUsername:
          type: string
          description: the username of the person who commented 
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: "shireen123" 
          
        comment:
          type: string
          description: the comment posted by user
          pattern: '^.*?$'
          minLength: 1
          maxLength: 30000
          example: "love ittt"


        photoID: 
          description: the photo identifier.
          type: integer
          example: 12

        photoUsername:
          type: string
          description: the username of the user who posted a photo
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: "natalia" 

    Comments:
      type: object
      description: all the comments posted on a  photo in an array list
      properties:
        Comments:
          type: array
          description: list of comments on a photo 
          minItems: 0
          maxItems: 9999999
          items:
            type: object
            properties:
              photoID: 
                description:  the photo identifier.
                type: integer
                example: 12
              comment:
                description: Users comment
                type: string
                pattern: '^.*?$'
                example: "Cute picture"
                minLength: 3
                maxLength: 10000
              username:
                description: the current username
                type: string
                pattern: '^.*?$'
                example: natalia1 
                minLength: 3
                maxLength: 16